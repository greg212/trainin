.length

int[] b = Arrays.copyOf(a, a.length); //array coping
                                      
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length.



assignment 1)

Write an efficient program for printing k largest elements in an array. 
Elements in array can be in any order.

http://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/


assignment 2)

http://www.geeksforgeeks.org/amazon-interview-set-8-2/

3)     Given an array of size N, move the first d elements to its last.

e.g. {1, 2, 3, 4, 5}, d=2

    output: {3, 4, 5, 1, 2}


http://www.geeksforgeeks.org/array-rotation/



////A Juggling Algorithm
/*Fuction to get gcd of a and b*/
int gcd(int a,int b)
{
   if(b==0)
     return a;
   else
     return gcd(b, a%b);
}

/*Function to left rotate arr[] of siz n by d*/
void leftRotate(int arr[], int d, int n)
{
  int i, j, k, temp;
  for (i = 0; i < gcd(d, n); i++)
  {
    /* move i-th values of blocks */
    temp = arr[i];
    j = i;
    while(1)
    {
      k = j + d;
      if (k >= n)
        k = k - n;
      if (k == i)
        break;
      arr[j] = arr[k];
      j = k;
    }
    arr[j] = temp;
  }
}

////~A Juggling Algorithm

or O(n d)

void leftRotatebyOne(int arr[], int n)
{
  int i, temp;
  temp = arr[0];
  for (i = 0; i < n-1; i++)
     arr[i] = arr[i+1];
  arr[i] = temp;
}
 
/*Function to left rotate arr[] of size n by d*/
void leftRotate(int arr[], int d, int n)
{
  int i;
  for (i = 0; i < d; i++)
    leftRotatebyOne(arr, n);
}
 


 array todo
 
 http://www.geeksforgeeks.org/maximum-sum-path-across-two-arrays/          
 
 
 https://www.careercup.com/question?id=5638261762424832